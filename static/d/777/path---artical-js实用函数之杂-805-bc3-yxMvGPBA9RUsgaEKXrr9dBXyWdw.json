{"data":{"site":{"siteMetadata":{"title":"yoyo","author":"yoyo"}},"markdownRemark":{"id":"efedc85b-7a29-5bcd-beb8-0b2c0d5967cf","excerpt":"一些实用的例子，大多来自 30-seconds-of-code 。主要用了 map，filter，reduce 等高阶函数，函数式写法，代码优雅 列举字符串所有排列组合 使用递归。对于给定字符串中的每个字母，为字母创建字谜。使用 map()将字母与每部分字谜组合，然后使用 reduce…","html":"<blockquote>\n<p>一些实用的例子，大多来自<a href=\"https://github.com/Chalarangelo/30-seconds-of-code\">30-seconds-of-code</a>。主要用了 map，filter，reduce 等高阶函数，函数式写法，代码优雅</p>\n</blockquote>\n<h1><strong>列举字符串所有排列组合</strong></h1>\n<p>使用递归。对于给定字符串中的每个字母，为字母创建字谜。使用 map()将字母与每部分字谜组合，然后使用 reduce()将所有字谜组合到一个数组中，最基本情况是字符串长度等于 2 或 1。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">anagrams</span> <span class=\"token operator\">=</span> str <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> str<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">2</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">[</span>str<span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> str<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>str<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> str\n    <span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>acc<span class=\"token punctuation\">,</span> letter<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> acc<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token function\">anagrams</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>val <span class=\"token operator\">=></span> letter <span class=\"token operator\">+</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//anagrams('abc') -> ['abc','acb','bac','bca','cab','cba']</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">anagrams</span> <span class=\"token operator\">=</span> str <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> str<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">2</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">[</span>str<span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> str<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>str<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> str\n    <span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>acc<span class=\"token punctuation\">,</span> letter<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> acc<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token function\">anagrams</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>val <span class=\"token operator\">=></span> letter <span class=\"token operator\">+</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>str.slice(0, i) + str.slice(i + 1)排除第 i 个字母重新组合字符串，通过 anagrams 本身处理后再加回第 i 个字母</p>\n<h1><strong>大写每个单词的首字母</strong></h1>\n<p>使用 replace()匹配每个单词的第一个字符，并使用 toUpperCase()来将其大写。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">capitalizeEveryWord</span> <span class=\"token operator\">=</span> str <span class=\"token operator\">=></span> str<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/\\b[a-z]/g</span><span class=\"token punctuation\">,</span> char <span class=\"token operator\">=></span> char<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">capitalizeEveryWord</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello world!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//'Hello World!'</span></code></pre></div>\n<h1><strong>首字母大写</strong></h1>\n<p>使用 slice(0,1)和 toUpperCase()大写第一个字母，slice(1)获取字符串的其余部分。 省略 lowerRest 参数以保持字符串的其余部分不变，或将其设置为 true 以转换为小写。（注意：这和上一个示例不是同一件事情）</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">capitalize</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> lowerRest <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  str<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>lowerRest <span class=\"token operator\">?</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//capitalize('myName', true) -> 'Myname'</span></code></pre></div>\n<h1><strong>检查回文</strong></h1>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">palindrome</span> <span class=\"token operator\">=</span> str <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> s <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/[\\W_]/g</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//除去非字母字符</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    s <span class=\"token operator\">===</span>\n    s\n      <span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//检查是否和字符串的反向相等</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//palindrome('taco cat') -> true</span></code></pre></div>\n<h1><strong>当前 URL</strong></h1>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">currentUrl</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> window<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>href<span class=\"token punctuation\">;</span>\n<span class=\"token function\">currentUrl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//当前地址</span></code></pre></div>\n<h1><strong>Curry</strong></h1>\n<p>使用递归。如果提供的参数（args）数量足够，则调用传递函数 f，否则返回一个 curried 函数 f。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">curry</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">,</span> arity <span class=\"token operator\">=</span> fn<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  arity <span class=\"token operator\">&lt;=</span> args<span class=\"token punctuation\">.</span>length <span class=\"token operator\">?</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> curry<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> fn<span class=\"token punctuation\">,</span> arity<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">curry</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span>pow<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//1024</span>\n<span class=\"token function\">curry</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span>min<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//2</span></code></pre></div>\n<h1><strong>两点之间的距离</strong></h1>\n<p>使用 Math.hypot()计算两点之间的欧几里德距离。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">distance</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x0<span class=\"token punctuation\">,</span> y0<span class=\"token punctuation\">,</span> x1<span class=\"token punctuation\">,</span> y1<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">hypot</span><span class=\"token punctuation\">(</span>x1 <span class=\"token operator\">-</span> x0<span class=\"token punctuation\">,</span> y1 <span class=\"token operator\">-</span> y0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// distance(1,1, 2,3) -> 2.23606797749979</span></code></pre></div>\n<h1><strong>可以按数字整除</strong></h1>\n<p>使用模运算符(％)来检查余数是否等于 0。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">isDivisible</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>dividend<span class=\"token punctuation\">,</span> divisor<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> dividend <span class=\"token operator\">%</span> divisor <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// isDivisible(6,3) -> true</span></code></pre></div>\n<h1><strong>转义正则表达式</strong></h1>\n<p>使用 replace()来转义特殊字符。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">escapeRegExp</span> <span class=\"token operator\">=</span> str <span class=\"token operator\">=></span> str<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/[.*+?^${}()|[\\]\\\\]/g</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'\\\\$&amp;'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// escapeRegExp('(test)') -> \\(test\\)</span></code></pre></div>\n<h1><strong>偶数或奇数</strong></h1>\n<p>使用 Math.abs()将逻辑扩展为负数，使用模(％)运算符进行检查。 如果数字是偶数，则返回 true；如果数字是奇数，则返回 false。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">isEven</span> <span class=\"token operator\">=</span> num <span class=\"token operator\">=></span> num <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// isEven(3) -> false</span></code></pre></div>\n<h1><strong>阶乘</strong></h1>\n<p>使用递归。如果 n 小于或等于 1，则返回 1。否则返回 n 和 n - 1 的阶乘的乘积。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">factorial</span> <span class=\"token operator\">=</span> n <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span> <span class=\"token operator\">?</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">:</span> n <span class=\"token operator\">*</span> <span class=\"token function\">factorial</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// factorial(6) -> 720</span></code></pre></div>\n<h1><strong>斐波那契数组生成器</strong></h1>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fibonacci</span> <span class=\"token operator\">=</span> n <span class=\"token operator\">=></span>\n  <span class=\"token function\">Array</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>acc<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> acc<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">></span> <span class=\"token number\">1</span> <span class=\"token operator\">?</span> acc<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> acc<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">:</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// fibonacci(5) -> [0,1,1,2,3]</span></code></pre></div>\n<h1><strong>获取滚动位置</strong></h1>\n<p>如果已定义，请使用 pageXOffset 和 pageYOffset，否则使用 scrollLeft 和 scrollTop，可以省略 el 来使用 window 的默认值。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getScrollPos</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>el <span class=\"token operator\">=</span> window<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  x<span class=\"token punctuation\">:</span> el<span class=\"token punctuation\">.</span>pageXOffset <span class=\"token operator\">!==</span> undefined <span class=\"token operator\">?</span> el<span class=\"token punctuation\">.</span>pageXOffset <span class=\"token punctuation\">:</span> el<span class=\"token punctuation\">.</span>scrollLeft<span class=\"token punctuation\">,</span>\n  y<span class=\"token punctuation\">:</span> el<span class=\"token punctuation\">.</span>pageYOffset <span class=\"token operator\">!==</span> undefined <span class=\"token operator\">?</span> el<span class=\"token punctuation\">.</span>pageYOffset <span class=\"token punctuation\">:</span> el<span class=\"token punctuation\">.</span>scrollTop\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// getScrollPos() -> {x: 0, y: 200}</span></code></pre></div>\n<h1><strong>最大公约数</strong></h1>\n<p>使用递归。基本情况是当 y 等于 0 时。在这种情况下，返回 x。否则，返回 y 和 x/y 的 GCD。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">gcd</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>y <span class=\"token operator\">?</span> x <span class=\"token punctuation\">:</span> <span class=\"token function\">gcd</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">,</span> x <span class=\"token operator\">%</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// gcd (8, 36) -> 4</span></code></pre></div>\n<h1><strong>list 初始化</strong></h1>\n<p>返回 arr.slice(0，-1)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">initial</span> <span class=\"token operator\">=</span> arr <span class=\"token operator\">=></span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// initial([1,2,3]) -> [1,2]</span></code></pre></div>\n<h1><strong>测试功能所花费的时间</strong></h1>\n<p>使用 performance.now()获取函数的开始和结束时间，console.log()所花费的时间。第一个参数是函数名，随后的参数传递给函数。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">timeTaken</span> <span class=\"token operator\">=</span> callback <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token string\">'timeTaken'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> r <span class=\"token operator\">=</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">timeEnd</span><span class=\"token punctuation\">(</span><span class=\"token string\">'timeTaken'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> r<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// timeTaken(() => Math.pow(2, 10)) -> 1024</span>\n<span class=\"token comment\">// (logged): timeTaken: 0.02099609375ms</span></code></pre></div>\n<h1><strong>来自键值对的对象</strong></h1>\n<p>使用 Array.reduce()来创建和组合键值对。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">objectFromPairs</span> <span class=\"token operator\">=</span> arr <span class=\"token operator\">=></span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// objectFromPairs([['a',1],['b',2]]) -> {a: 1, b: 2}</span></code></pre></div>\n<h1><strong>Powerset</strong></h1>\n<p>使用 reduce()与 map()结合来遍历元素，并将其组合成包含所有组合的数组。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">powerset</span> <span class=\"token operator\">=</span> arr <span class=\"token operator\">=></span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">=></span> r<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// powerset([1,2]) -> [[], [1], [2], [1,2]]</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">powerset</span> <span class=\"token operator\">=</span> arr <span class=\"token operator\">=></span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>a<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">=></span> r<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h1><strong>范围内的随机整数</strong></h1>\n<p>使用 Math.random()生成一个随机数并将其映射到所需的范围，使用 Math.floor()使其成为一个整数。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">randomIntegerInRange</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>min<span class=\"token punctuation\">,</span> max<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>max <span class=\"token operator\">-</span> min <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> min<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// randomIntegerInRange(0, 5) -> 2</span></code></pre></div>\n<h1><strong>反转一个字符串</strong></h1>\n<p>使用数组解构和 Array.reverse()来颠倒字符串中的字符顺序。合并字符以使用 join('')获取字符串。[...str]</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">reverseString</span> <span class=\"token operator\">=</span> str <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>str<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// reverseString('foobar') -> 'raboof'</span></code></pre></div>\n<h1><strong>RGB 到十六进制</strong></h1>\n<p>使用按位左移运算符(&#x3C;&#x3C;)和 toString(16)，然后 padStart(6，“0”)将给定的 RGB 参数转换为十六进制字符串以获得 6 位十六进制值。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">rgbToHex</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">,</span> g<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>g <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">padStart</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// rgbToHex(255, 165, 1) -> 'ffa501'</span></code></pre></div>\n<h1><strong>滚动到顶部</strong></h1>\n<p>使用 document.documentElement.scrollTop 或 document.body.scrollTop 获取到顶部的距离。从顶部滚动一小部分距离。使用 window.requestAnimationFrame（）来滚动。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">scrollToTop</span> <span class=\"token operator\">=</span> _ <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> c <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">.</span>scrollTop <span class=\"token operator\">||</span> document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>scrollTop<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    window<span class=\"token punctuation\">.</span><span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span>scrollToTop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    window<span class=\"token punctuation\">.</span><span class=\"token function\">scrollTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> c <span class=\"token operator\">-</span> c <span class=\"token operator\">/</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// scrollToTop()</span></code></pre></div>\n<h1><strong>按字符串排序（按字母顺序排列）</strong></h1>\n<p>使用 split(\")分割字符串，sort()使用 localeCompare()，使用 join(\")重新组合。\nlocaleCompare()用本地特定的顺序来比较两个字符串。sort()根据 unicode 排序，2 在 10 后面。这里省略(a, b) => a.localeCompare(b)也可以</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">sortCharactersInString</span> <span class=\"token operator\">=</span> str <span class=\"token operator\">=></span>\n  str\n    <span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a<span class=\"token punctuation\">.</span><span class=\"token function\">localeCompare</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// sortCharactersInString('cabbage') -> 'aabbceg'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">sortCharactersInString</span> <span class=\"token operator\">=</span> str <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>str<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a<span class=\"token punctuation\">.</span><span class=\"token function\">localeCompare</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h1><strong>获取 URL 参数</strong></h1>\n<p>使用 match() 与适当的正则表达式来获得所有键值对，适当的 map() 。使用 Object.assign()和 spread 运算符(...)将所有键值对组合到一个对象中，将 location.search 作为参数传递给当前 url。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getUrlParameters</span> <span class=\"token operator\">=</span> url <span class=\"token operator\">=></span>\n  url<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/([^?=&amp;]+)(=([^&amp;]*))/g</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span>\n    <span class=\"token comment\">//[\"name=Adam\", \"surname=Smith\"]</span>\n    <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'='</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'='</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// getUrlParameters('http://url.com/page?name=Adam&amp;surname=Smith') -> {name: 'Adam', surname: 'Smith'}</span></code></pre></div>\n<h1><strong>UUID 生成器</strong></h1>\n<p>使用 crypto API 生成符合 RFC4122 版本 4 的 UUID。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">uuid</span> <span class=\"token operator\">=</span> _ <span class=\"token operator\">=></span>\n  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1e7</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token operator\">-</span><span class=\"token number\">1e3</span> <span class=\"token operator\">+</span> <span class=\"token operator\">-</span><span class=\"token number\">4e3</span> <span class=\"token operator\">+</span> <span class=\"token operator\">-</span><span class=\"token number\">8e3</span> <span class=\"token operator\">+</span> <span class=\"token operator\">-</span><span class=\"token number\">1e11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/[018]/g</span><span class=\"token punctuation\">,</span> c <span class=\"token operator\">=></span>\n    <span class=\"token punctuation\">(</span>c <span class=\"token operator\">^</span> <span class=\"token punctuation\">(</span>crypto<span class=\"token punctuation\">.</span><span class=\"token function\">getRandomValues</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token number\">15</span> <span class=\"token operator\">>></span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">/</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// uuid() -> '7982fcfe-5721-4632-bede-6000885be57d'</span></code></pre></div>\n<h1><strong>验证数字</strong></h1>\n<p>使用！isNaN 和 parseFloat()来检查参数是否是一个数字，使用 isFinite()来检查数字是否是有限的。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">validateNumber</span> <span class=\"token operator\">=</span> n <span class=\"token operator\">=></span> <span class=\"token operator\">!</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span><span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">isFinite</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> n<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// validateNumber('10') -> true</span></code></pre></div>\n<blockquote>\n<p>未完待续...</p>\n</blockquote>","frontmatter":{"title":"js实用方法之杂","date":"2017.10.12"}}},"pageContext":{"slug":"/artical/js实用函数之杂/","previous":{"frontmatter":{"title":"redux文档整理"},"fields":{"slug":"/artical/redux文档总结/","tagSlugs":["/tags/react/","/tags/redux/"]}},"next":null}}