{"data":{"site":{"siteMetadata":{"title":"yoyo","author":"yoyo"}},"markdownRemark":{"id":"e0637a27-66f2-5505-9ae0-a6e1d12f74d7","excerpt":"功能 适用的操作符 过滤掉不满足条件的数据 filter 获得满足条件的第一个数据 first 获得满足条件的最后一个数据 last 从数据流中选取最先出现的若干数据 take 从数据流中选取最后出现的若干数据 takeLast 从数据流中选取数据直到某种情况发生 takeWhile 、 takeUntil…","html":"<table>\n<thead>\n<tr>\n<th align=\"left\"><center>功能</center></th>\n<th align=\"left\"><center>适用的操作符</center></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">过滤掉不满足条件的数据</td>\n<td align=\"left\"><a href=\"#filter\">filter</a></td>\n</tr>\n<tr>\n<td align=\"left\">获得满足条件的第一个数据</td>\n<td align=\"left\"><a href=\"#first\">first</a></td>\n</tr>\n<tr>\n<td align=\"left\">获得满足条件的最后一个数据</td>\n<td align=\"left\"><a href=\"#last\">last</a></td>\n</tr>\n<tr>\n<td align=\"left\">从数据流中选取最先出现的若干数据</td>\n<td align=\"left\"><a href=\"#take\">take</a></td>\n</tr>\n<tr>\n<td align=\"left\">从数据流中选取最后出现的若干数据</td>\n<td align=\"left\"><a href=\"#takeLast\">takeLast</a></td>\n</tr>\n<tr>\n<td align=\"left\">从数据流中选取数据直到某种情况发生</td>\n<td align=\"left\"><a href=\"#takeWhile\">takeWhile</a>、<a href=\"#takeUntil\">takeUntil</a></td>\n</tr>\n<tr>\n<td align=\"left\">从数据流中忽略最先出现的若干数据</td>\n<td align=\"left\"><a href=\"#skip\">skip</a></td>\n</tr>\n<tr>\n<td align=\"left\">从数据流中忽略数据直到某种情况发生</td>\n<td align=\"left\"><a href=\"#skipWhile\">skipWhile</a>、<a href=\"#skipUntil\">skipUntil</a></td>\n</tr>\n<tr>\n<td align=\"left\">基于时间的数据流量筛选</td>\n<td align=\"left\"><a href=\"#throttleTime%E5%92%8CdebounceTime\">throttleTime</a>、<a href=\"#throttleTime%E5%92%8CdebounceTime\">debounceTime</a>、<a href=\"#auditTime%E5%92%8Caudit\">auditTime</a></td>\n</tr>\n<tr>\n<td align=\"left\">基于数据内容的数据流量筛选</td>\n<td align=\"left\"><a href=\"#throttle%E5%92%8Cdebounce\">throttle</a>、<a href=\"#throttle%E5%92%8Cdebounce\">debounce</a>、<a href=\"#auditTime%E5%92%8Caudit\">audit</a></td>\n</tr>\n<tr>\n<td align=\"left\">基于采样方式的数据流量筛选</td>\n<td align=\"left\"><a href=\"#sample\">sample</a>、<a href=\"#sampleTime\">sampleTime</a></td>\n</tr>\n<tr>\n<td align=\"left\">删除重复的数据</td>\n<td align=\"left\"><a href=\"#distnct\">distnct</a></td>\n</tr>\n<tr>\n<td align=\"left\">删除重复的连续数据</td>\n<td align=\"left\"><a href=\"#distnctUntilChanged\">distnctUntilChanged</a>、<a href=\"#distinctUntilKeyChanged\">distinctUntilKeyChanged</a></td>\n</tr>\n<tr>\n<td align=\"left\">忽略数据流中的所有数据</td>\n<td align=\"left\"><a href=\"#ignoreElements\">ignoreElements</a></td>\n</tr>\n<tr>\n<td align=\"left\">只选取指定出现位置的数据</td>\n<td align=\"left\"><a href=\"#elementAt\">elementAt</a></td>\n</tr>\n<tr>\n<td align=\"left\">判断是否只有一个数据满足判定条件</td>\n<td align=\"left\"><a href=\"#single\">single</a></td>\n</tr>\n</tbody>\n</table>\n<p>过滤类操作符的主要作用就是判断一个数据是否有资格进入下游，用的是一个“判断函数”，“判断函数”返回 true 代表可以进入下游，否则被淘汰。几乎所有的过滤类操作符都有判定函数，部分还可以接受一个“结果选择器”，可以简单的对筛选后的结果做处理后再丢给下游，不指定结果选择器时会默认一个结果选择器：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">resultSelect</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>然而，在 V6 版本里，结果选择器都被移除了，官方鼓励你通过 map 等转换操作符先转换数据，再过滤，而不是过滤后通过结果选择器来“突然转换数据”，这样不直观，没法一眼扫过从选择器大概看出进行了哪些操作，其中说不定有某些结果选择器在扰乱视听，不符合纯函数的思想，具体看<a href=\"https://github.com/ReactiveX/rxjs/blob/master/MIGRATION.md#result-selectors\">result-selectors</a></strong></p>\n<h1>filter</h1>\n<p>过滤掉不满足条件的数据,不支持结果选择器。只要数据满足条件，就会立刻进入下游</p>\n<h1>first</h1>\n<p>获得满足条件的第一个数据，接收第二个参数，在没有满足条件的数据时抛给下游一个默认值。如果直到上游完结也没有满足条件的数据，则向下游扔出一个 error</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//筛选出第一个偶数，并且带着索性输出一个数组：</span>\n<span class=\"token comment\">//V5（已废弃的写法）</span>\n<span class=\"token keyword\">const</span> source$ <span class=\"token operator\">=</span> <span class=\"token keyword\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span><span class=\"token operator\">></span> <span class=\"token function\">first</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">=></span> a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//V6</span>\n<span class=\"token keyword\">const</span> source$ <span class=\"token operator\">=</span> <span class=\"token keyword\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span><span class=\"token operator\">></span> <span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span><span class=\"token operator\">></span> <span class=\"token function\">first</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">=></span> a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h1>last</h1>\n<p>获得满足条件的最后一个数据，其他都和 first 一样，唯一要注意的是只有在完结的时候才吐出数据。</p>\n<h1>take</h1>\n<p>从上游“拿”若干个数据，拿够了就完结了。相当于可以拿多个数据的 first</p>\n<h1>takeLast</h1>\n<p>从数据流中选取最后出现的若干数据，只有上游完结的时候才决定吐出哪些数据，然后一次性吐出数据并立即完结，相当于可以拿多个数据的 last</p>\n<h1>takeWhile</h1>\n<p>输出满足条件的数据，只要有一个数据不满足就立刻完结。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//用takeWhile实现take</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">myTake</span> <span class=\"token operator\">=</span> count <span class=\"token operator\">=></span> source$ <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> source$ <span class=\"token operator\">|</span><span class=\"token operator\">></span> <span class=\"token function\">takeWhile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> i <span class=\"token operator\">&lt;</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> source$ <span class=\"token operator\">=</span> <span class=\"token keyword\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span><span class=\"token operator\">></span> <span class=\"token function\">myTake</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h1>takeUntil</h1>\n<p>上游数据直接转手给下游，同时监视另一个 Observable 对象，只要它吐出数据或者完结，takeUntil 也立刻完结。如果监视的 Observable 抛出错误，takeUntil 会把错误传递给下游\n相当于一个水龙头，用另一个数据流去控制上游什么时候停止输出。同样有一个 Observable 控制另一个 Observable 的还有 repeatWhen。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> source$ <span class=\"token operator\">=</span> <span class=\"token function\">timer</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span><span class=\"token operator\">></span> <span class=\"token function\">takeUntil</span><span class=\"token punctuation\">(</span><span class=\"token function\">timer</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//0 1 done</span>\nsource$<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'done'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//统计5秒内点击次数（不太完善，应该点击后才开始计时，主要演示takeUntil用法）</span>\n<span class=\"token keyword\">let</span> num <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> timeOut$ <span class=\"token operator\">=</span> <span class=\"token function\">timer</span><span class=\"token punctuation\">(</span><span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> click$ <span class=\"token operator\">=</span> <span class=\"token function\">fromEvent</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#btn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'click'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span><span class=\"token operator\">></span> <span class=\"token function\">takeUntil</span><span class=\"token punctuation\">(</span>timeOut$<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ntimeOut$<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'5秒时间到'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nclick$<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#text'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token operator\">++</span>num<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h1>skip</h1>\n<p>接收一个 count 参数，忽略最先出现的 count 个数据，若上游数据不足 count 个，上游完结时 skip 也跟着完结。</p>\n<h1>skipWhile/skipUntil</h1>\n<p>和 takeWhile/takeUntil 完全对立。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//点击按钮后才开始吐数据</span>\n<span class=\"token keyword\">const</span> source$ <span class=\"token operator\">=</span> <span class=\"token function\">timer</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span><span class=\"token operator\">></span> <span class=\"token function\">skipUntil</span><span class=\"token punctuation\">(</span><span class=\"token function\">fromEvent</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#btn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'click'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span><span class=\"token operator\">></span> <span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h1>回压控制</h1>\n<p>Rxjs 的世界中，数据管道就像现实中的液体或者气体，如果数据管道中某一环节处理数据的卒读跟不上数据涌入的速度，上游无法把数据推送给下游，就会在缓冲区挤压数据，相当于对上游施加了压力。比如 zip 操作符，如果 A 数据流产生速度比 B 快，zip 按照一对一配对原则，那么 zip 不得不缓存 A 推送的数据，时间一长，zip 需要缓存 A 产生的数据就会越来越多。\n所以 Rxjs 也提供了一系列处理这种现象的操作符</p>\n<p>实际应用中经常需要限制某种事情发生的次数，如</p>\n<ul>\n<li>鼠标移动事件</li>\n<li>屏幕滚动事件</li>\n<li>渲染网页的函数</li>\n<li>处理管道中处理数据的函数\nthrottle 表示节流，debounce 表示防抖动</li>\n</ul>\n<h1>throttleTime 和 debounceTime</h1>\n<p>加上 Time 表示根据时间做回压控制。</p>\n<ul>\n<li>throttleTime 接受一个时间参数 duration，作用是限制一定时间范围内上游传递给下游数据的个数。每次吐出一个数据后 <strong>先吐给下游</strong> ，然后开始计时 duration 毫秒，期间忽略所有数据，duration 最后时刻也会被忽略。</li>\n<li>debounceTime 接受一个时间参数 dueTime，作用是限制传递给下游的数据间隔不能小于给定时间。每次吐出一个数据后标记该数据为“最新数据”，开始计时 dueTime 毫秒，如果期间不产生数据，就把这个缓存了的数据吐给下游，如果期间产生了数据，就重新标记“最新数据”。\n<strong>注意：上游完结的时候，最后一个数据总是会进入下游</strong></li>\n</ul>\n<h1>throttleTime 的应用</h1>\n<p>适用于当数据流短时间内可能有大量数据产生，我们希望只有一个数据能被处理时。\n最常见的应用就是限制鼠标短时间内多次点击：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//1S内最多触发一次点击事件</span>\n<span class=\"token keyword\">const</span> source$ <span class=\"token operator\">=</span> <span class=\"token function\">fromEvent</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#btn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'click'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span><span class=\"token operator\">></span> <span class=\"token function\">throttleTime</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h1>debounceTime 的应用</h1>\n<p>只要数据在以很快的速度持续产生时，就不去处理他们，直到产生数据的速度慢下来。\n比如当一个页面上下滚动时可能需要家在一些动态图片，会发 ajax 请求，但是只要 sroll 事件持续产生，说明用户在快速滚动页面没有停下来，或者滚到底部马上又滚回顶部，那就没必要去请求获取更多资源。这时候可以用 debounceTime。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//限定当用户滚动网页然后停下来200ms后才会触发scrollHandler</span>\n<span class=\"token keyword\">const</span> source$ <span class=\"token operator\">=</span> <span class=\"token function\">fromEvent</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">,</span> <span class=\"token string\">'scroll'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span><span class=\"token operator\">></span> <span class=\"token function\">debounceTime</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsource$<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span>scrollHandler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h1>throttle 和 debounce</h1>\n<p>用数据流来控制流量，接受一个函数作为参数。</p>\n<ul>\n<li>throttle\n上游每次吐出一个数据，这个数据就会传入 throttle 的函数参数生成一个 Observable 对象，throttle 会立刻订阅这个 Observable 对象，当这个 Observable 吐出第一个数据时，允许上游传递数据给下游（如果这时候上游正好吐出数据的话）。每次上游吐出一个数据，就会重复执行上面的操作，退订之前生成的 Observable 对象，订阅新的 Observable 对象，等待新的 Observable 吐出第一个数据...相当于一个控制上游流入下游的闸门。</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> source$ <span class=\"token operator\">=</span>\n  <span class=\"token function\">interval</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n  <span class=\"token operator\">|</span><span class=\"token operator\">></span> <span class=\"token function\">throttle</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">timer</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//0 3 6 ...</span>\n<span class=\"token comment\">//相当于</span>\n<span class=\"token keyword\">const</span> source$ <span class=\"token operator\">=</span> <span class=\"token function\">interval</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span><span class=\"token operator\">></span> <span class=\"token function\">throttleTime</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>debounce\n类似 throttle。</li>\n</ul>\n<p>一般情况下用 throttleTime 和 debounceTime 来固定时间进行回压控制就够了，只有 throttleTime 和 debounceTime 不满足要求的时候才会用 throttle 和 debounce。</p>\n<h1>auditTime 和 audit</h1>\n<p>和 throttle 类似，throttle 是把节流期间第一个数据传给下游，audit 是把节流期间最后一个数据传给下游。需要注意的是如果节流期间上游完结了，audit 不会传递数据，直接完结。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> source$ <span class=\"token operator\">=</span> <span class=\"token function\">interval</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span><span class=\"token operator\">></span> <span class=\"token function\">throttleTime</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//0 2 4 ...</span>\n<span class=\"token keyword\">const</span> source$ <span class=\"token operator\">=</span> <span class=\"token function\">interval</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span><span class=\"token operator\">></span> <span class=\"token function\">auditTime</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//1 3 5 ...</span></code></pre></div>\n<h1>sampleTime 和 sample</h1>\n<p>取样。类似 audit，一定时间内吐出最后一个数据，不同的是 audit 的节流区间是吐出上一个数据时开始的，sample 的节流区间和上游无关，从一开始就均匀的分割好了节流区间，数据也会均匀间隔的吐给下游。需要注意的是如果节流区间内上游没有数据吐出，audit 也不会输出。\n<strong>注意：sample 和前几个不同，它接受的参数不是函数，只是一个 Observable</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//获得从订阅开始到点击之间的毫秒数</span>\n<span class=\"token keyword\">const</span> source$ <span class=\"token operator\">=</span> <span class=\"token function\">timer</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span><span class=\"token operator\">></span> <span class=\"token function\">sample</span><span class=\"token punctuation\">(</span><span class=\"token function\">fromEvent</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#btn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'click'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h1>distinct</h1>\n<p>只返回没出现过的数据，过滤掉 <strong>后出现的重复数据</strong>。distinct 是用<code class=\"language-text\">===</code>比较的，所以对于对象就没什么意义了，所以 distinct 提供了一个函数参数用于定制对比对象的上面属性</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> source$ <span class=\"token operator\">=</span> <span class=\"token keyword\">of</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> value<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> value<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> value<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> value<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span><span class=\"token operator\">></span> <span class=\"token function\">distinct</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">=></span> a<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//{ value: 1 } { value: 2 } { value: 3 }</span></code></pre></div>\n<p>distinct 还会存在一个问题，想像一下它的实现方式，肯定是把上游推送下来的每一个数据存在一个公共集合里，后面产生的每一个数据都先对比下是否已经存在于公共集合了。这种实现方式下如果上游产生的数据非常多，distinct 就要持续维持庞大的数据集合，就会造成内存泄漏。\n所以 distinct 提供了第二个参数，为一个 Observable 对象，每当这个 Observable 对象产生数据时，distinct 就清空公共集合，不过这样 distinct 的作用就变成了“一段时间内”是唯一的，所以要视情况来用</p>\n<h1>distinctUntilChanged</h1>\n<p>类似 distinct，不过 distinctUntilChanged 是直接和上一个数据比较，所以只要保存上一个数据就够了，不存在内存泄漏。效果变成了使产生的数据并列的 2 个不会重复，和 distinct 一样接受一个函数参数，用于定制判断对象的哪个属性。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> source$ <span class=\"token operator\">=</span>\n  <span class=\"token keyword\">of</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> value<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> value<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> value<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> value<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> value<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token operator\">|</span><span class=\"token operator\">></span> <span class=\"token function\">distinctUntilChanged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a<span class=\"token punctuation\">.</span>value <span class=\"token operator\">===</span> b<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//{ value: 1 } { value: 2 } { value: 3 } { value: 2 }</span></code></pre></div>\n<h1>distinctUntilKeyChanged</h1>\n<p>简化版 distinctUntilChanged。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> source$ <span class=\"token operator\">=</span>\n  <span class=\"token keyword\">of</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> value<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> value<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> value<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> value<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> value<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span><span class=\"token operator\">></span> <span class=\"token function\">distinctUntilKeyChanged</span><span class=\"token punctuation\">(</span><span class=\"token string\">'value'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//{ value: 1 } { value: 2 } { value: 3 } { value: 2 }</span></code></pre></div>\n<h1>ignoreElements</h1>\n<p>忽略上游所有数据，只关心 error 和 complete。</p>\n<h1>elementAt</h1>\n<p>把上游当作数组，指过去指定下表的那个数据，可以接受第二个参数，作为找不到对应数据时的默认值。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> source$ <span class=\"token operator\">=</span> <span class=\"token keyword\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span><span class=\"token operator\">></span> <span class=\"token function\">elementAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">666</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//666</span></code></pre></div>\n<h1>single</h1>\n<p>检查上游是否只有一个满足条件的数据，如果“是”就把这个数据传递给下游，如果“否”就向下游传递一个异常。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> source$ <span class=\"token operator\">=</span> <span class=\"token keyword\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span><span class=\"token operator\">></span> <span class=\"token function\">single</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">=></span> a <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//hostReportError.js:8 Uncaught Sequence contains more than one element</span></code></pre></div>","frontmatter":{"title":"Rxjs笔记（8）：过滤数据流","date":"2018.05.31"}}},"pageContext":{"slug":"/artical/rx8过滤数据流/","previous":{"fields":{"slug":"/artical/rx9操作符组合例子/"},"frontmatter":{"title":"Rxjs笔记（9）：操作符例子集合"}},"next":{"fields":{"slug":"/artical/rx7辅助类操作符/"},"frontmatter":{"title":"Rxjs笔记（7）：辅助类操作符"}}}}