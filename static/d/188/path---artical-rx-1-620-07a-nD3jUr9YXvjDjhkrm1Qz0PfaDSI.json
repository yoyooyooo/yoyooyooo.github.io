{"data":{"site":{"siteMetadata":{"title":"yoyo","author":"yoyo"}},"markdownRemark":{"id":"cb82da46-82e1-5b2f-84b8-75e332cd8db4","excerpt":"https://stackblitz.com/edit/rx-1 一个例子，对比 jQuery 和 Rxjs 分别写的简单 demo。 jQuery 版本：\nstartTime 变量在 2 个不痛的函数都有用到，一不小心就会引发 bug。代码看起来是一串指令。 Rxjs…","html":"<blockquote>\n<p><a href=\"https://stackblitz.com/edit/rx-1\">https://stackblitz.com/edit/rx-1</a></p>\n</blockquote>\n<p>一个例子，对比 jQuery 和 Rxjs 分别写的简单 demo。</p>\n<ul>\n<li>\n<p>jQuery 版本：\nstartTime 变量在 2 个不痛的函数都有用到，一不小心就会引发 bug。代码看起来是一串指令。</p>\n</li>\n<li>\n<p>Rxjs 版本：所有变量其实都没有“变”，赋值时是什么值，就一直保持这些值。代码是一个个函数，每个函数只是对输入的参数做了响应并返回结果。</p>\n</li>\n</ul>\n<p>Rxjs 引用了 2 个重要的编程思想：</p>\n<ul>\n<li>函数式</li>\n<li>响应式</li>\n</ul>\n<h1><strong>函数式编程</strong></h1>\n<p><strong>命令式编程：强调“怎么去做”</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">double</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> results <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    results<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> results<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">double</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>缺点：很容易写重复代码，比如上面例子，现在不是要每个 2 倍，而是 3 倍，那么就要把上面一大段复制来，把 2 改成 3</p>\n<p><strong>申明式编程：强调“想要做什么”</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">double</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>item <span class=\"token operator\">=></span> item <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">double</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>优点：for 被封装在 map 方法里，把一个数组映射成另一个数组，不需要再去写循环的重复代码，易读，易维护。而且不修改原数组，函数式编程另一个重要的特性：\n<strong>纯函数</strong>:输入决定输出，函数不修改任何外部状态</p>\n<p><strong>面向对象与函数式编程</strong></p>\n<ul>\n<li>面向对象的思想是把数据封装在类的实例对象中，外部不能直接访问这些对象，只能通过类提供的实例方法来读取和修改。带来了一个天生缺陷：数据的修改历史被隐藏了，我们只能知道对象的当前状态，没法知道这个对象是如何一步步变为这个状态的。</li>\n<li>函数式编程倾向于数据就是数据，函数就是函数，函数可以处理数据，通过产生新的数据作为运算结果（纯函数）</li>\n</ul>\n<h1><strong>响应式编程</strong></h1>\n<p>一种通过异步和数据流来构建事物关系的编程模型。数据流只是事物之间沟通的桥梁，如 DOM 事件，通过 ajax 获得数据，网页动画显示等等都可以看作是一个数据流。特点：</p>\n<ul>\n<li>数据流抽象了很多现实问题</li>\n<li>擅长处理异步操作</li>\n<li>把复杂问题分解成简单问题的组合</li>\n</ul>\n<blockquote>\n<p>Rxjs 擅长处理异步操作，它对数据采用“推”的处理方式，当一个数据产生的时候，被推送给对应的处理函数，这个处理函数不用关心数据是同步还是异步产生的，把开发者从命令式异步处理的枷锁中解放出来。\nRxjs 中的数据流可能包含复杂的功能，但是可以分解成很多小的部分来实现，实现某个小功能的函数就是操作符，Rxjs 就是通过组合各种操作符来解决复杂问题。</p>\n</blockquote>\n<blockquote>\n<p>部分代码来自<a href=\"https://github.com/mocheng/dissecting-rxjs\">https://github.com/mocheng/dissecting-rxjs</a></p>\n</blockquote>","frontmatter":{"title":"Rxjs笔记（1）","date":"2018.05.14"}}},"pageContext":{"slug":"/artical/rx1/","previous":{"fields":{"slug":"/artical/rx2/"},"frontmatter":{"title":"Rxjs笔记（2）"}},"next":{"fields":{"slug":"/artical/react-motion笔记/"},"frontmatter":{"title":"react-motion笔记"}}}}