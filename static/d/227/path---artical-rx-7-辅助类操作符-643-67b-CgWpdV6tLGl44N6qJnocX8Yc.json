{"data":{"site":{"siteMetadata":{"title":"yoyo","author":"yoyo"}},"markdownRemark":{"id":"31e0a56f-8adc-5773-959f-5c0850c9f3d7","excerpt":"功能 适用的操作符 统计数据流中产生的所有数据个数 count 获得数据流中最大或者最小的数据 max 、 min 对数据流中所有数据进行规约操作 reduce 判断是否所有数据都满足某个条件 every 找到第一个满足条件的数据 find 、 findIndex 判断一个数据流是否不包含任何数据 isEmpty…","html":"<table>\n<thead>\n<tr>\n<th align=\"left\"><center>功能</center></th>\n<th align=\"left\"><center>适用的操作符</center></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">统计数据流中产生的所有数据个数</td>\n<td align=\"left\"><a href=\"#count\">count</a></td>\n</tr>\n<tr>\n<td align=\"left\">获得数据流中最大或者最小的数据</td>\n<td align=\"left\"><a href=\"#max-min\">max</a>、<a href=\"#max-min\">min</a></td>\n</tr>\n<tr>\n<td align=\"left\">对数据流中所有数据进行规约操作</td>\n<td align=\"left\"><a href=\"#reduce\">reduce</a></td>\n</tr>\n<tr>\n<td align=\"left\">判断是否所有数据都满足某个条件</td>\n<td align=\"left\"><a href=\"#every\">every</a></td>\n</tr>\n<tr>\n<td align=\"left\">找到第一个满足条件的数据</td>\n<td align=\"left\"><a href=\"#find-findIndex\">find</a>、<a href=\"#find-findIndex\">findIndex</a></td>\n</tr>\n<tr>\n<td align=\"left\">判断一个数据流是否不包含任何数据</td>\n<td align=\"left\"><a href=\"#isEmpty\">isEmpty</a></td>\n</tr>\n<tr>\n<td align=\"left\">如果一个数据流为空就默认产生一个指定数据</td>\n<td align=\"left\"><a href=\"#defaultEmpty\">defaultEmpty</a></td>\n</tr>\n</tbody>\n</table>\n<h1><strong>数学类操作符</strong></h1>\n<p>count、max、min、reduce。都是实例操作符，都会遍历上游数据流所有数据才传递给下游，所以只有上游完结的时候，才吐出一个唯一数据给下游。</p>\n<h1>count</h1>\n<p>统计上游吐出的所有数据的个数</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> source$ <span class=\"token operator\">=</span> <span class=\"token keyword\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span><span class=\"token operator\">></span> <span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span><span class=\"token operator\">></span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//6</span></code></pre></div>\n<h1>max/min</h1>\n<p>取出上游所有数据的最大值/最小值。接收一个比较函数作为参数，用于比较不是数值的数据。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> source$ <span class=\"token operator\">=</span> <span class=\"token keyword\">of</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> value<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> value<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> value<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span><span class=\"token operator\">></span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a<span class=\"token punctuation\">.</span>value <span class=\"token operator\">-</span> b<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//{ value: 3 }</span>\n\n<span class=\"token keyword\">const</span> source$ <span class=\"token operator\">=</span> <span class=\"token keyword\">of</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> value<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> value<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> value<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span><span class=\"token operator\">></span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a<span class=\"token punctuation\">.</span>value <span class=\"token operator\">-</span> b<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//{ value: 1 }</span></code></pre></div>\n<h1>reduce</h1>\n<p>类似 js 数组的 reduce 方法，只是处理的是 Observable 对象,接收参数的使用方法一模一样。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> source$ <span class=\"token operator\">=</span> <span class=\"token function\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span><span class=\"token operator\">></span> <span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a <span class=\"token operator\">+</span> c<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//5050</span></code></pre></div>\n<p>实际上其他数学类操作符都可以用 reduce 实现：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//reduce实现求平均数操作符</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">average</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> source$ <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    source$\n    <span class=\"token operator\">|</span><span class=\"token operator\">></span> <span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> sum<span class=\"token punctuation\">:</span> a<span class=\"token punctuation\">.</span>sum <span class=\"token operator\">+</span> c<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">:</span> a<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      sum<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n      count<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|</span><span class=\"token operator\">></span> <span class=\"token function\">map</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">=></span> a<span class=\"token punctuation\">.</span>sum <span class=\"token operator\">/</span> a<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> source$ <span class=\"token operator\">=</span> <span class=\"token function\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span><span class=\"token operator\">></span> <span class=\"token function\">average</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//50.5</span></code></pre></div>\n<h1>every</h1>\n<p>类似于 js 数组的 every 方法，判断上游所有数据是否符合某判定函数，接受的参数和用法完全一样。如果全部符合，则最后吐出一个 true 给下游，如果有一个数据不符合，立刻吐出 false 给下游，无论 true 还是 false，every 吐出数据后会立刻完结。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> source$ <span class=\"token operator\">=</span> <span class=\"token function\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span><span class=\"token operator\">></span> <span class=\"token function\">every</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">=></span> a <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//true</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> source$ <span class=\"token operator\">=</span> <span class=\"token function\">interval</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span><span class=\"token operator\">></span> <span class=\"token function\">every</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">=></span> a <span class=\"token operator\">></span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsource$<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'done'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//false done</span></code></pre></div>\n<h1>find/findIndex</h1>\n<p>用法和 js 数组的 find/findIndex 一模一样，例子懒得举了，需要注意的是</p>\n<ul>\n<li>如果上游用不完结且没有出现满足条件的数据，find/findIndex 会用不完结</li>\n<li>如果上游所有数据都不满足条件，find 会吐出 undefined，findIndex 会吐出-1</li>\n</ul>\n<h1>isEmpty</h1>\n<p>检查 Observable 对象是不是“空的”，空的 Observable 对象指不吐出任何数据就完结的 Observable 对象。上游吐出第一个数据的时候 isEmpty 就会立刻吐出 false。如果是空的也要等上游完结的时候才会吐出 true。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> source$ <span class=\"token operator\">=</span>\n  Observable<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>subscriber <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      subscriber<span class=\"token punctuation\">.</span><span class=\"token function\">complete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span><span class=\"token operator\">></span> <span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//2s后吐出true</span></code></pre></div>\n<h1>defaultEmpty</h1>\n<p>如果上游是空的就吐个默认值给下游，如果不是空的，就把上游原样吐给下游什么都不干。如果上游是空的但是 defaultEmpty 不输入参数，则吐出 null</p>","frontmatter":{"title":"Rxjs笔记（7）：辅助类操作符","date":"2018.05.30"}}},"pageContext":{"slug":"/artical/rx7辅助类操作符/","previous":{"frontmatter":{"title":"Rxjs笔记（8）：过滤数据流","tags":["rxjs"]},"fields":{"slug":"/artical/rx8过滤数据流/","tagSlugs":["/tags/rxjs/"]}},"next":{"frontmatter":{"title":"Rxjs笔记（6）：合并类操作符","tags":["rxjs"]},"fields":{"slug":"/artical/rx6合并类操作符/","tagSlugs":["/tags/rxjs/"]}}}}