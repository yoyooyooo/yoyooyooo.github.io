{"data":{"site":{"siteMetadata":{"title":"yoyo","author":"yoyo"}},"markdownRemark":{"id":"ae29e1ff-e0bc-5496-bab8-0e897be22764","excerpt":"高阶 Observable 高阶 Observable 打开了一扇大门，用一个 Observable 对象来管理多个 Observable…","html":"<h1><strong>高阶 Observable</strong></h1>\n<p>高阶 Observable 打开了一扇大门，用一个 Observable 对象来管理多个 Observable 对象。实际处理多个数据流时，最土的办法就是每条数据流赋值给不同变量，然后操作这些变量，但是多处理几个问题后就会发现这些其实是重复的工作，完全可以抽象出来（类似于把多个类似的逻辑抽象函数，或者把多个类似普通函数抽象成高阶函数）。数据流虽然是用来管理数据的，但是数据流本身也可以被看成一个数据，也可以用 OBservable 来管理，让需要被管理的数据流成其他数据流的数据，用现成的 Observable 对象和操作符来管理这，这就是高阶 Observable 的意义</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> source$ <span class=\"token operator\">=</span> <span class=\"token function\">interval</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span><span class=\"token operator\">></span> <span class=\"token function\">take</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span><span class=\"token operator\">></span> <span class=\"token function\">map</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">=></span> <span class=\"token function\">interval</span><span class=\"token punctuation\">(</span><span class=\"token number\">1500</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span><span class=\"token operator\">></span> <span class=\"token function\">map</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">=></span> a <span class=\"token operator\">+</span> <span class=\"token string\">':'</span> <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nsource$<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span>\n  a <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    a<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//0:0 1:0 0:1 1:1 ...</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'done'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>上面这个例子中 source$ 生成了 2 个一阶 Observable，这 2 个 Observable 在被吐出时被下游订阅，开始他们自己的节奏吐数据，这 2 个 Observable 间隔 1000ms 订阅，所以第二个 Observable 比第一个晚开始吐数据，最终呈现交叉数据。弹珠图可表示为：\n<img src=\"http://p4yaly36s.bkt.clouddn.com/201805290013_586.png\"></p>\n<p><strong>注意：高阶 Observable 内部生成的低阶 Observable 不会随主干的完结而完结，他们是独立的，有自己的生命周期</strong></p>","frontmatter":{"title":"Rxjs笔记（5）：高阶Observable","date":"2018.05.27"}}},"pageContext":{"slug":"/artical/rx5高阶Observable/","previous":{"frontmatter":{"title":"Rxjs笔记（6）：合并类操作符","tags":["rxjs"]},"fields":{"slug":"/artical/rx6合并类操作符/","tagSlugs":["/tags/rxjs/"]}},"next":{"frontmatter":{"title":"Rxjs笔记（4）：创建类操作符","tags":["rxjs"]},"fields":{"slug":"/artical/rx4创建类操作符/","tagSlugs":["/tags/rxjs/"]}}}}