{"data":{"site":{"siteMetadata":{"title":"yoyo","author":"yoyo"}},"markdownRemark":{"id":"2ba7efb3-6338-5ed9-bf93-7d5288696f01","excerpt":"同步类： create   of   range   generate   repeat 异步类： interval   timer   from   fromEvent   fromEvent   fromEventPattern   repeatWhen   defer 同步类 create…","html":"<p>同步类：<a href=\"#create\">create</a> <a href=\"#of\">of</a> <a href=\"#range\">range</a> <a href=\"#generate\">generate</a> <a href=\"#repeat\">repeat</a></p>\n<p>异步类：<a href=\"#interval\">interval</a> <a href=\"#timer\">timer</a> <a href=\"#from\">from</a> <a href=\"#fromEvent\">fromEvent</a> <a href=\"#fromEvent\">fromEvent</a> <a href=\"#fromEventPattern\">fromEventPattern</a> <a href=\"#repeatWhen\">repeatWhen</a> <a href=\"#defer\">defer</a></p>\n<h1><strong>同步类</strong></h1>\n<h1>create</h1>\n<p>静态操作符，没什么花头，相当于 Observable 构造函数</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Observable<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">create</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>subscribe<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Observable</span><span class=\"token punctuation\">(</span>subscribe<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h1>of</h1>\n<p>静态操作符，创建已知数据流</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//1,2,3</span></code></pre></div>\n<h1>range</h1>\n<p>静态操作符，指定范围数据流</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//1,2,3...100</span></code></pre></div>\n<h1>generate</h1>\n<p>静态操作符，循环创建数据流\nof 和 range 都有局限性，如果想产生一个比 10 小的所有偶数的平方，用 for 循环可以这样写：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  result<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">*</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>用 generate:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> source$ <span class=\"token operator\">=</span> Observable<span class=\"token punctuation\">.</span><span class=\"token function\">generate</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> val <span class=\"token operator\">=></span> val <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> val <span class=\"token operator\">=></span> val <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> val <span class=\"token operator\">=></span> val <span class=\"token operator\">*</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>按顺序相当于 for 循环的 3 个参数 + 结果,第一个参数是一个值，后 3 个都是函数\ngenerate 实现 range：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">range</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> max <span class=\"token operator\">=</span> start <span class=\"token operator\">+</span> end<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> Observable<span class=\"token punctuation\">.</span><span class=\"token function\">generate</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span> val <span class=\"token operator\">=></span> val <span class=\"token operator\">&lt;</span> max<span class=\"token punctuation\">,</span> val <span class=\"token operator\">=></span> val <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> val <span class=\"token operator\">=></span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>generate 还能产生不是数字的数据，如字符串：</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> source$ <span class=\"token operator\">=</span> Observable<span class=\"token punctuation\">.</span><span class=\"token function\">generate</span><span class=\"token punctuation\">(</span><span class=\"token string\">'x'</span><span class=\"token punctuation\">,</span> val <span class=\"token operator\">=></span> val<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> val <span class=\"token operator\">=></span> val <span class=\"token operator\">+</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> val <span class=\"token operator\">=></span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h1>repeat</h1>\n<p>实例操作符，重复数据流，重复上游数据若干次，产生一个全新 Observable 对象，效果是重复订阅/取消订阅若干次上游数据流\n<strong>注意事项：</strong>repeat 只有在上游 Observable 对象完结之后才会重新订阅，也就是说如果上游永不完结，repeat 也就不会生效</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span><span class=\"token operator\">></span> <span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//1,2,3,1,2,3,1,2,3</span></code></pre></div>\n<p><strong>empty/throwError/never</strong></p>\n<ul>\n<li>empty：静态操作符，产生一个 <strong>直接完结</strong> 的 Observable 对象，没有参数，不产生任何数据，直接完结。用法：Observable.empty()</li>\n<li>throwError：静态操作符，产生一个 <strong>直接出错</strong> 的 Observable 对象。用法：throwError(new Error(\"出错了\"))</li>\n<li>never：静态操作符，<strong>什么都不做</strong>。不完结，不出错，不吐数据，直到永远。用法：throwError(new Error(\"出错了\"))</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//学了后面后补充的例子，可以concat在结尾连接个never，让一个数据流不完结</span>\n<span class=\"token function\">interval</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span><span class=\"token operator\">></span> <span class=\"token function\">take</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span><span class=\"token operator\">></span> <span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token function\">never</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h1><strong>异步类</strong></h1>\n<h1>interval</h1>\n<p>静态操作符，定时产生永不完结的数据流，从 0 开始，间隔 1。接受一个参数，为时间间隔。如果要产生其他数据，可以配合 map 使用</p>\n<h1>timer</h1>\n<p>静态操作符，一定时间后吐出一个 0，然后立即完结。接收一个参数，可以是数值也可以是 Date 对象，如果是数值代表毫秒数，如果是 Data 对象代表。还可以接收第二个参数，如果有第二个参数，会持续吐出数据，第二个参数代表时间间隔。<code class=\"language-text\">timer(1000,1000)</code>和<code class=\"language-text\">interval(1000)</code>完全一样。可以认为 interval 是 timer2 个参数相同时候的简写</p>\n<h1>from</h1>\n<p>静态操作符，把一切转化为 Observable 对象。接收一个参数，只要“像”Observable 对象就行了，如数组、类数组对象、字符串、generator、Promise</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">yield</span> i<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> source$ <span class=\"token operator\">=</span> <span class=\"token keyword\">from</span><span class=\"token punctuation\">(</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//1,2,3,4,5</span></code></pre></div>\n<h1>fromEvent</h1>\n<p>静态操作符。把 DOM 事件中的对象转化为 Observable 对象中的数据。(还可以从 Node.js 的 events 中获得数据)。<strong>fromEvent 产生的是 hot Observable,订阅之前的数据不会吐出来</strong></p>\n<p>简单例子：实现点击按钮数字+1</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>btn<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> event$ <span class=\"token operator\">=</span> <span class=\"token function\">fromEvent</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#btn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'click'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nevent$<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#text'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h1>fromEventPattern</h1>\n<p>静态操作符。接收 2 个函数作为参数，分别对应 Observable 对象被订阅和被退订时的动作。</p>\n<h1>ajax</h1>\n<p>异步请求获取数据，<strong>注意引用路径</strong>。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ajax <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'rxjs/ajax'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> source$ <span class=\"token operator\">=</span> <span class=\"token function\">fromEvent</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#btn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'click'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsource$<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span><span class=\"token string\">'xxx.xx'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span>res <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h1>repeatWhen</h1>\n<p>实例操作符。反复订阅上游数据流，如希望在接收到上游完结事件的时候等待一段时间再重新订阅，这样的功能 repeat 无法实现.\nrepeatWhen 接收一个函数作为参数（一个特殊的 Observable 对象，后文再讨论），这个函数返回一个 Observable 对象，这个对象就是控制器，作用是控制 repeatWhen 何时订阅上游，当控制器吐出一个数据的时候，repeatWhen 就会 <strong>退订上游并重新订阅</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//repeatWhen结合interval实现每隔1S上游数据重新订阅一次</span>\n<span class=\"token keyword\">const</span> source$ <span class=\"token operator\">=</span> <span class=\"token keyword\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span><span class=\"token operator\">></span> <span class=\"token function\">repeatWhen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">interval</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsource$<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//1,2,3,1,2,3,1,2,3...</span>\n\n<span class=\"token comment\">//repeatWhen结合delay实现每隔1S上游数据重新订阅一次</span>\n<span class=\"token keyword\">const</span> source$ <span class=\"token operator\">=</span> <span class=\"token keyword\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span><span class=\"token operator\">></span> <span class=\"token function\">repeatWhen</span><span class=\"token punctuation\">(</span>src$ <span class=\"token operator\">=></span> src$ <span class=\"token operator\">|</span><span class=\"token operator\">></span> <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h1>defer</h1>\n<p>静态操作符。接收一个函数作为参数每当 defer 产生的 Observable 对象被订阅时，defer 的函数参数就会被调用，逾期这个函数返回另一个 Observable 对象（defer 也支持函数参数返回 Promise）。目的是为了 <strong>节约资源</strong>，只有被订阅时数据流才会被创造出来。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> source$ <span class=\"token operator\">=</span> <span class=\"token function\">defer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>of 本身不占多少资源，如果我们要通过 ajax 获取服务器数据，可是不想在程序启动的时候就把 ajax 请求发出去，就可以利用 defer 产生一个 <strong>代理</strong> Observable 对象，当这个 Observable 对象被订阅时才发送 ajax 请求</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> source$ <span class=\"token operator\">=</span> <span class=\"token function\">defer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","frontmatter":{"title":"Rxjs笔记（4）：创建类操作符","date":"2018.05.26"}}},"pageContext":{"slug":"/artical/rx4创建类操作符/","previous":{"frontmatter":{"title":"Rxjs笔记（5）：高阶Observable","tags":["rxjs"]},"fields":{"slug":"/artical/rx5高阶Observable/","tagSlugs":["/tags/rxjs/"]}},"next":{"frontmatter":{"title":"Rxjs笔记（3）：操作符","tags":["rxjs"]},"fields":{"slug":"/artical/rx3操作符/","tagSlugs":["/tags/rxjs/"]}}}}